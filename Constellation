/*Problem Description:
Three characters { #, *, . } represents a constellation of stars and galaxies in space. Each galaxy is
demarcated by # characters. There can be one or many stars in a given galaxy. Stars can only be in shape
of vowels { A, E, I, O, U } . A collection of * in the shape of the vowels is a star. A star is contained in a 3x3
block. Stars cannot be overlapping. The dot(.) character denotes empty space.
Given 3xN matrix comprising of { #, *, . } character, find the galaxy and stars within them.
Note: Please pay attention to how vowel A is denoted in a 3x3 block in the examples section below.
Constraints
3 <= N <= 10^5
Input
Input consists of single integer N denoting number of columns.
Output
Output contains vowels (stars) in order of their occurrence within the given galaxy. Galaxy itself is
represented by # character.
Time Limit
1
Examples
Example 1
Input
18
* . * # * * * # * * * # * * * . * .
* . * # * . * # . * . # * * * * * *
* * * # * * * # * * * # * * * * . *
Output
U#O#I#EA
Explanation
As it can be seen that the stars make the image of the alphabets U, O, I, E and A respectively.*/

//Program 

#include <stdio.h>

int main()
{
    int n,i,j,count=0,k;
    scanf("%d",&n);
    char s[3][n];
    scanf("%s\n%s\n%s",s[0],s[1],s[2]);
    i=0;
    j=0;
    while(i<n)
    {
        count=0;
        if(s[0][i]=='#')
        {
            i++;
            printf("#");
            continue;
        }
        else if(s[0][i]=='.' && s[1][i]=='.' && s[2][i]=='.')
        {
            i++;
            continue;
        }
        for(j=0;j<3;j++)
        {
            for(k=i;k<i+3;k++)
            {
                if(s[j][k]=='*')
                count++;
            }
        }
        if(count==9)
        {
            printf("E");
        }
        else if(count==8)
        {
            printf("O");
        }
        else if(count==7 && s[1][i]=='*')
        {
            printf("U");
        }
        else if(count==7)
        {
            printf("I");
        }
        else if(count==6) 
        {
            printf("A");
        }
        i+=3;
    }
    

    return 0;
}
